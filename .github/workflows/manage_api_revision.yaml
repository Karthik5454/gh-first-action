name: Manage APIM Revisions

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to perform: "create" for creating a new revision, "activate" for setting a revision as current, "delete" for deleting a revision'
        required: true
        default: 'create'
        options:
          - create
          - activate
          - delete

jobs:
  create-revision:
    if: ${{ github.event.inputs.action == 'create' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set environment variables for create action
      id: set-create-env
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const yaml = require('js-yaml');
          const filePath = 'revision/variables/create.yaml';
          const envVariables = yaml.load(fs.readFileSync(filePath, 'utf8'));

          for (const [key, value] of Object.entries(envVariables)) {
            core.exportVariable(key, value);
          }

    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest

    - name: Log in to Azure
      run: az login --service-principal -u fca4af1e-520f-4fa2-9435-5d61bf418430 -p a-n8Q~ecSAmoyjoPW5V7F~2Zwj9Jm.nQWF62xc1S --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118
    - name: Check if revision to create exists
      run: |
        if [[ -z "${{ env.RESOURCE_GROUP }}" || -z "${{ env.APIM_NAME }}" || -z "${{ env.API_ID }}" || -z "${{ env.NEW_REVISION_NUMBER }}" ]]; then
          echo "One or more required environment variables are missing."
          exit 1
        fi
        revision_exists=$(az apim api revision list --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --query "[?apiRevision=='${{ env.NEW_REVISION_NUMBER }}'].apiRevision" --output tsv)
        if [[ -z $revision_exists ]]; then
          az apim api revision create --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --api-revision ${{ env.NEW_REVISION_NUMBER }} --api-revision-description "${{ env.REVISION_DESCRIPTION }}"
          echo "Revision ${{ env.NEW_REVISION_NUMBER }} created successfully."
        else
          echo "The revision ${{ env.NEW_REVISION_NUMBER }} already exists and will not be created."
        fi

  activate-revision:
    if: ${{ github.event.inputs.action == 'activate' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set environment variables for activate action
      id: set-activate-env
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const yaml = require('js-yaml');
          const filePath = 'revision/variables/activate.yaml';
          const envVariables = yaml.load(fs.readFileSync(filePath, 'utf8'));

          for (const [key, value] of Object.entries(envVariables)) {
            core.exportVariable(key, value);
          }

    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest

    - name: Log in to Azure
      run: az login --service-principal -u fca4af1e-520f-4fa2-9435-5d61bf418430 -p a-n8Q~ecSAmoyjoPW5V7F~2Zwj9Jm.nQWF62xc1S --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118
    - name: Check current API revision
      id: check_current_revision
      run: |
        if [[ -z "${{ env.RESOURCE_GROUP }}" || -z "${{ env.APIM_NAME }}" || -z "${{ env.API_ID }}" || -z "${{ env.REVISION_TO_ACTIVATE }}" ]]; then
          echo "One or more required environment variables are missing."
          exit 1
        fi
        current_revision=$(az apim api show --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --query "revision" -o tsv)
        echo "::set-output name=current_revision::${current_revision}"

    - name: Activate API revision if not current
      run: |
        current_revision=$(az apim api show --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --query "revision" -o tsv)
        if [[ "$current_revision" != "${{ env.REVISION_TO_ACTIVATE }}" ]]; then
          az apim api revision activate --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --api-revision ${{ env.REVISION_TO_ACTIVATE }}
          echo "Revision ${{ env.REVISION_TO_ACTIVATE }} activated successfully."
        else
          echo "Revision ${{ env.REVISION_TO_ACTIVATE }} is already the current revision."
        fi

  delete-revision:
    if: ${{ github.event.inputs.action == 'delete' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set environment variables for delete action
      id: set-delete-env
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const yaml = require('js-yaml');
          const filePath = 'revision/variables/delete.yaml';
          const envVariables = yaml.load(fs.readFileSync(filePath, 'utf8'));

          for (const [key, value] of Object.entries(envVariables)) {
            core.exportVariable(key, value);
          }

    - name: Set up Azure CLI
      uses: azure/CLI@v1
      with:
        azcliversion: latest

    - name: Log in to Azure
      run: az login --service-principal -u fca4af1e-520f-4fa2-9435-5d61bf418430 -p a-n8Q~ecSAmoyjoPW5V7F~2Zwj9Jm.nQWF62xc1S --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118

    - name: Check if revision to delete exists
      run: |
        if [[ -z "${{ env.RESOURCE_GROUP }}" || -z "${{ env.APIM_NAME }}" || -z "${{ env.API_ID }}" || -z "${{ env.REVISION_TO_DELETE }}" ]]; then
          echo "One or more required environment variables are missing."
          exit 1
        fi
        revision_exists=$(az apim api revision list --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --query "[?apiRevision=='${{ env.REVISION_TO_DELETE }}'].apiRevision" --output tsv)
        current_revision=$(az apim api show --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --query "revision" -o tsv)
        if [[ -z $revision_exists ]]; then
          echo "The revision ${{ env.REVISION_TO_DELETE }} does not exist."
        elif [[ "$current_revision" == "${{ env.REVISION_TO_DELETE }}" ]]; then
          echo "The revision ${{ env.REVISION_TO_DELETE }} is the current version and cannot be deleted."
        else
          az apim api revision delete --resource-group ${{ env.RESOURCE_GROUP }} --service-name ${{ env.APIM_NAME }} --api-id ${{ env.API_ID }} --api-revision ${{ env.REVISION_TO_DELETE }}
          echo "Revision ${{ env.REVISION_TO_DELETE }} deleted successfully."
        fi
