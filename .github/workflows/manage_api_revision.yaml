name: Manage APIM Revisions

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose the action to perform: "create" for creating a new revision, "activate" for setting a revision as current, "delete" for deleting a revision'
        required: true
        default: 'create'
        options:
          - create
          - activate
          - delete

jobs:
  create-revision:
    if: ${{ github.event.inputs.action == 'create' }}

    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to Azure
      run: az login --service-principal -u a6d620a0-91ee-4644-8cef-8f1b477bc789 -p aTE8Q~V39jqp1pfotJ6c50.2-jFn59TymjMlScm4 --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118

    - name: Set up Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
        

  activate-revision:
    if: ${{ github.event.inputs.action == 'activate' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to Azure
      run: az login --service-principal -u a6d620a0-91ee-4644-8cef-8f1b477bc789 -p aTE8Q~V39jqp1pfotJ6c50.2-jFn59TymjMlScm4 --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118

    - name: Set up Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
        
    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Load variables from YAML
      id: load-variables
      run: |
        variables=$(cat revision/variables/activate.yaml)
        echo "resourceGroupName=$(echo "$variables" | yq eval '.resourceGroupName' -)" >> $GITHUB_ENV
        echo "serviceName=$(echo "$variables" | yq eval '.serviceName' -)" >> $GITHUB_ENV
        echo "ApiId=$(echo "$variables" | yq eval '.ApiId' -)" >> $GITHUB_ENV
        echo "Revision_to_activate=$(echo "$variables" | yq eval '.REVISION_TO_ACTIVATE' -)" >> $GITHUB_ENV

    - name: Azure PowerShell script
      env:
        resourceGroupName: ${{ env.resourceGroupName }}
        serviceName: ${{ env.serviceName }}
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          Connect-AzAccount -ServicePrincipal -Credential (New-Object System.Management.Automation.PSCredential('a6d620a0-91ee-4644-8cef-8f1b477bc789', (ConvertTo-SecureString 'aTE8Q~V39jqp1pfotJ6c50.2-jFn59TymjMlScm4' -AsPlainText -Force))) -Tenant '84f1e4ea-8554-43e1-8709-f0b8589ea118'
          $apimContext = New-AzApiManagementContext -ResourceGroupName '${{ env.resourceGroupName }}' -ServiceName '${{ env.serviceName }}'
          $api = Get-AzApiManagementApi -Context $apimContext -ApiId '${{ env.ApiId }}''
          if ($api) {
              # Check if the specified revision exists
              $revisionExists = $api.Properties.apiRevisions -contains '${{ env.Revision_to_activate }}'
              if ($revisionExists) {
                  # Check if the specified revision is not already current
                  if ($api.Properties.apiRevision -ne '${{ env.Revision_to_activate }}') {
                      # Update the current API revision
                      $api.Properties.apiRevision = '${{ env.Revision_to_activate }}'

                      # Set the updated API properties
                      Set-AzApiManagementApi -Context $apimContext -ApiId $apiId -Api $api

                      Write-Output "API revision '${{ env.Revision_to_activate }}' set as current."
                  } else {
                      Write-Output "API revision '${{ env.Revision_to_activate }}' is already set as current."
                  }
              } else {
                  Write-Output "API revision '${{ env.Revision_to_activate }}' does not exist."
              }
          } else {
              Write-Output "API with ID '${{ env.ApiId }}' not found."
          }

  delete-revision:
    if: ${{ github.event.inputs.action == 'delete' }}
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Log in to Azure
      run: az login --service-principal -u a6d620a0-91ee-4644-8cef-8f1b477bc789 -p aTE8Q~V39jqp1pfotJ6c50.2-jFn59TymjMlScm4 --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118

    - name: Set up Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
          az account show
        
    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.16.1/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Load variables from YAML
      id: load-variables
      run: |
        variables=$(cat revision/variables/activate.yaml)
        echo "resourceGroupName=$(echo "$variables" | yq eval '.resourceGroupName' -)" >> $GITHUB_ENV
        echo "serviceName=$(echo "$variables" | yq eval '.serviceName' -)" >> $GITHUB_ENV
        echo "ApiId=$(echo "$variables" | yq eval '.ApiId' -)" >> $GITHUB_ENV
        echo "Revision_to_delete=$(echo "$variables" | yq eval '.REVISION_TO_DELETE' -)" >> $GITHUB_ENV
        
    - name: Azure PowerShell script
      env:
        resourceGroupName: ${{ env.resourceGroupName }}
        serviceName: ${{ env.serviceName }}
      uses: azure/powershell@v2
      with:
        azPSVersion: "latest"
        inlineScript: |
          Connect-AzAccount -ServicePrincipal -Credential (New-Object System.Management.Automation.PSCredential('a6d620a0-91ee-4644-8cef-8f1b477bc789', (ConvertTo-SecureString 'aTE8Q~V39jqp1pfotJ6c50.2-jFn59TymjMlScm4' -AsPlainText -Force))) -Tenant '84f1e4ea-8554-43e1-8709-f0b8589ea118'
          $apimContext = New-AzApiManagementContext -ResourceGroupName '${{ env.resourceGroupName }}' -ServiceName '${{ env.serviceName }}'
          $apiRevisionExists = Get-AzApiManagementApiRevision -Context $apimContext -ApiId '${{ env.ApiId }} -ApiRevision '${{ env.Revision_to_delete }} -ErrorAction SilentlyContinue
          if ($apiRevisionExists) {
            # Get the current API revision
            $currentApiRevision = Get-AzApiManagementApi -Context $apimContext -ApiId '${{ env.ApiId }} | Select-Object -ExpandProperty ApiRevision

            if ($currentApiRevision -ne $apiRevisionToRemove) {
                # Remove the specified API revision
                Remove-AzApiManagementApiRevision -Context $apimContext -ApiId '${{ env.ApiId }} -ApiRevision '${{ env.Revision_to_delete }}'
                
                Write-Output "API revision '${{ env.Revision_to_delete }}' removed successfully."
            } else {
                Write-Output "Cannot remove the current API revision '${{ env.Revision_to_delete }}'."
            }
          }else {
              Write-Output "API revision '${{ env.Revision_to_delete }}' does not exist."
          }
