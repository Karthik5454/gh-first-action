name: Manage API Management

on:
  workflow_dispatch:  # Manually triggered workflow

jobs:
  manage-api-management:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      
    - name: Login to Azure
      run: az login --service-principal -u 5d0400a1-102b-40ec-8e36-a317f8a44866 -p uuu8Q~4L4a0BbPnQeQ2jPxRbN3cEtryuufj.BbP6 --tenant 84f1e4ea-8554-43e1-8709-f0b8589ea118

    - name: Set up Azure CLI
      uses: azure/CLI@v2
      with:
        azcliversion: latest
        inlineScript: |
            az account show
    - name: Install Azure PowerShell module
      run: |
        pwsh -Command 'Install-Module -Name Az -Force -AllowClobber'
    - name: Manage API Management
      shell: pwsh
      run: |
        # Replace with your Azure PowerShell script content
        $resourceGroupName = "1-f0fd95fc-playground-sandbox"
        $serviceName = "apim-test-karthik3"
        $productName = "karthik"
        $apiId1 = "echo-api"
        $subscriptionId = "karthik"
        
        Connect-AzAccount -ServicePrincipal -Credential (New-Object System.Management.Automation.PSCredential('5d0400a1-102b-40ec-8e36-a317f8a44866', (ConvertTo-SecureString 'uuu8Q~4L4a0BbPnQeQ2jPxRbN3cEtryuufj.BbP6' -AsPlainText -Force))) -Tenant '84f1e4ea-8554-43e1-8709-f0b8589ea118'
        $apimContext = New-AzApiManagementContext -ResourceGroupName $resourceGroupName -ServiceName $serviceName
        # Check if the product already exists
        $productExists = Get-AzApiManagementProduct -Context $apimContext -ProductId $productName -ErrorAction SilentlyContinue
        
        if (-not $productExists) {
          Write-Output "Product '$productName' does not exist. Creating..."
          # Create the product
          $null = New-AzApiManagementProduct -Context $apimContext -ProductId $productName -Title $productName -Description "$productName Product" -SubscriptionRequired $True -State "Published"
        }
        else {
          Write-Output "Product '$productName' already exists."
        }
        # Add APIs to the product
        Write-Output "Adding APIs to product '$productName'..."
        # check api exists in the product
        
        $apiExists = Get-AzApiManagementApi -Context $apimContext -ProductId $productName -ErrorAction SilentlyContinue
        if (-not $apiExists) {
          Write-Output "API '$apiId1' does not exist in product '$productName'. Adding..."
          $null = Add-AzApiManagementApiToProduct -Context $apimContext -ProductId $productName -ApiId $apiId1
        }
        else {
          Write-Output "API '$apiId1' already exists in product '$productName'."
        }

        $exists = Get-AzApiManagementSubscription -Context $apimContext -SubscriptionId $subscriptionId -ErrorAction SilentlyContinue
    
        # Check if subscription exists and create if it doesn't
        if (-not $exists) {
          Write-Output "Subscribing user to product '$productName'..."
          
          $null = New-AzApiManagementSubscription -Context $apimContext -Scope "/products/$productName" -Name $productName -SubscriptionId $productName

        }
        else {
          Write-Output "Subscription for user '$userId' already exists. Skipping subscription creation."
        }
